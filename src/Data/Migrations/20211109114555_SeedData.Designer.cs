// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(CarRentalSystemContext))]
    [Migration("20211109114555_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("KeyHandOverTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("KeyReceivingTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RentalPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("RentalPointId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Data.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("FuelConsumptionPerHundredKilometers")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastViewTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RentalPointId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransmissionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RentalPointId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa9a2a71-f067-496b-ae27-ac9bfc92de19"),
                            CarBrand = "Porsche 911",
                            Color = "Red",
                            FuelConsumptionPerHundredKilometers = 12m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 4,
                            PricePerDay = 150m,
                            RentalPointId = new Guid("1d923094-1728-4c78-9169-7a7dfd95c8ae"),
                            TransmissionType = "Automate"
                        },
                        new
                        {
                            Id = new Guid("c39d5d90-5a66-455f-86f8-375b56b5fbae"),
                            CarBrand = "Renault Kadjar",
                            Color = "Black",
                            FuelConsumptionPerHundredKilometers = 4m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 60m,
                            RentalPointId = new Guid("1d923094-1728-4c78-9169-7a7dfd95c8ae"),
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = new Guid("b9648ce7-ea43-4a38-b4ce-2c6e45e0bd33"),
                            CarBrand = "Mazda cx 5",
                            Color = "Blue",
                            FuelConsumptionPerHundredKilometers = 6.7m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 65m,
                            RentalPointId = new Guid("1d923094-1728-4c78-9169-7a7dfd95c8ae"),
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = new Guid("7cf47bf1-8d8c-4052-aca8-0c9fe552af61"),
                            CarBrand = "Mazda cx 5",
                            Color = "Red",
                            FuelConsumptionPerHundredKilometers = 6.7m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 65m,
                            RentalPointId = new Guid("2030b8bb-8ec5-49ab-9300-a10430f65f5e"),
                            TransmissionType = "Mechanic"
                        });
                });

            modelBuilder.Entity("Data.Entities.CityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42a1105d-4a06-438e-8343-b58a73c58466"),
                            CountryId = new Guid("ec06f33f-f038-4a1a-838d-b5930e1a75da"),
                            Title = "Minsk"
                        },
                        new
                        {
                            Id = new Guid("fa4a64cb-8a48-4db3-b15b-15de6fb2f5bb"),
                            CountryId = new Guid("ec25bc88-148b-4219-be94-90b986a93b94"),
                            Title = "Warsaw"
                        });
                });

            modelBuilder.Entity("Data.Entities.CountryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Title");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec06f33f-f038-4a1a-838d-b5930e1a75da"),
                            Title = "Belarus"
                        },
                        new
                        {
                            Id = new Guid("ec25bc88-148b-4219-be94-90b986a93b94"),
                            Title = "Poland"
                        });
                });

            modelBuilder.Entity("Data.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Data.Entities.RentalPointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("LocationX")
                        .HasColumnType("real");

                    b.Property<float?>("LocationY")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("RentalPoints");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d923094-1728-4c78-9169-7a7dfd95c8ae"),
                            CityId = new Guid("42a1105d-4a06-438e-8343-b58a73c58466"),
                            CountryId = new Guid("ec06f33f-f038-4a1a-838d-b5930e1a75da"),
                            Title = "Title 1!"
                        },
                        new
                        {
                            Id = new Guid("2030b8bb-8ec5-49ab-9300-a10430f65f5e"),
                            CityId = new Guid("fa4a64cb-8a48-4db3-b15b-15de6fb2f5bb"),
                            CountryId = new Guid("ec25bc88-148b-4219-be94-90b986a93b94"),
                            Title = "Title 2!"
                        });
                });

            modelBuilder.Entity("Data.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5679e3dc-1f0a-4989-85a4-a14dccc47bb5"),
                            Title = "Admin"
                        },
                        new
                        {
                            Id = new Guid("19833c78-0c21-474d-b5de-7d6b00271434"),
                            Title = "User"
                        });
                });

            modelBuilder.Entity("Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("486839dc-6d7a-4dec-a88c-f345b7e47e47"),
                            Email = "admin@mail.ru",
                            PasswordHash = "123456"
                        },
                        new
                        {
                            Id = new Guid("7274cc9f-146d-4ebe-886b-da90968fd42f"),
                            Email = "user@mail.ru",
                            PasswordHash = "123456"
                        });
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleEntityUserEntity");
                });

            modelBuilder.Entity("Data.Entities.BookingEntity", b =>
                {
                    b.HasOne("Data.Entities.CarEntity", "Car")
                        .WithMany("Bookings")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.RentalPointEntity", "RentalPoint")
                        .WithMany("Bookings")
                        .HasForeignKey("RentalPointId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Entities.UserEntity", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("RentalPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.CarEntity", b =>
                {
                    b.HasOne("Data.Entities.RentalPointEntity", "RentalPoint")
                        .WithMany("Cars")
                        .HasForeignKey("RentalPointId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RentalPoint");
                });

            modelBuilder.Entity("Data.Entities.CityEntity", b =>
                {
                    b.HasOne("Data.Entities.CountryEntity", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Data.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("Data.Entities.UserEntity", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Data.Entities.RefreshTokenEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.RentalPointEntity", b =>
                {
                    b.HasOne("Data.Entities.CityEntity", "City")
                        .WithMany("RentalPointEntities")
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.CountryEntity", "Country")
                        .WithMany("RentalPointEntities")
                        .HasForeignKey("CountryId");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("Data.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.CarEntity", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Data.Entities.CityEntity", b =>
                {
                    b.Navigation("RentalPointEntities");
                });

            modelBuilder.Entity("Data.Entities.CountryEntity", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("RentalPointEntities");
                });

            modelBuilder.Entity("Data.Entities.RentalPointEntity", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Data.Entities.UserEntity", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RefreshToken");
                });
#pragma warning restore 612, 618
        }
    }
}
