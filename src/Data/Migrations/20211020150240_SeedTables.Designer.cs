// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20211020150240_SeedTables")]
    partial class SeedTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdditionalFacilityEntityBookingEntity", b =>
                {
                    b.Property<int>("AdditionalFacilitiesId")
                        .HasColumnType("int");

                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdditionalFacilitiesId", "BookingsId");

                    b.HasIndex("BookingsId");

                    b.ToTable("AdditionalFacilityEntityBookingEntity");
                });

            modelBuilder.Entity("Data.Entities.AdditionalFacilityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AdditionalFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 3.6m,
                            Title = "Moika mashiny"
                        },
                        new
                        {
                            Id = 2,
                            Price = 2.5m,
                            Title = "Water to car"
                        },
                        new
                        {
                            Id = 3,
                            Price = 3.6m,
                            Title = "Vacuum cleaning"
                        });
                });

            modelBuilder.Entity("Data.Entities.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("KeyHandOverTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("KeyReceivingTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RentalPointId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("RentalPointId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Data.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("FuelConsumptionPerHundredKilometers")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastViewTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RentalPointId")
                        .HasColumnType("int");

                    b.Property<string>("TransmissionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RentalPointId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CarBrand = "Audi A4",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 1,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CarBrand = "Car 2",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 1,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CarBrand = "Car 3",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 1,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CarBrand = "Car 4",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 1,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CarBrand = "Car 5",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 1,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CarBrand = "Car 2",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 2,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CarBrand = "Car 3",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 2,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CarBrand = "Car 4",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 3,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CarBrand = "Car 5",
                            Color = "Green",
                            FuelConsumptionPerHundredKilometers = 7.44m,
                            IsBooked = false,
                            LastViewTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfSeats = 5,
                            PricePerDay = 20.5m,
                            RentalPointId = 4,
                            TransmissionType = "Automate",
                            VehicleNumber = "7300EK-4"
                        });
                });

            modelBuilder.Entity("Data.Entities.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RentalPointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentalPointId")
                        .IsUnique()
                        .HasFilter("[RentalPointId] IS NOT NULL");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Lenina 1",
                            City = "Grodno",
                            Country = "Belarus"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Real 1",
                            City = "Madrid",
                            Country = "Spain"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sun 33a",
                            City = "Barcelona",
                            Country = "Spain"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Red Square 56",
                            City = "Moscow",
                            Country = "Russia"
                        });
                });

            modelBuilder.Entity("Data.Entities.RentalPointEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RentalPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = 1,
                            Title = "Best cars"
                        },
                        new
                        {
                            Id = 2,
                            LocationId = 2,
                            Title = "Best cars2"
                        },
                        new
                        {
                            Id = 3,
                            LocationId = 3,
                            Title = "Best cars3"
                        },
                        new
                        {
                            Id = 4,
                            LocationId = 4,
                            Title = "Best cars4"
                        });
                });

            modelBuilder.Entity("Data.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Title = "User"
                        });
                });

            modelBuilder.Entity("Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "aakarkanica@gmail.com",
                            Name = "Dima",
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Surname = "Karkanitsa"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Email = "mail1@gmail.com",
                            Name = "User 1",
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Surname = "Karkanitsa"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Email = "mail2@gmail.com",
                            Name = "User 2",
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Surname = "Karkanitsa"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Email = "mail3@gmail.com",
                            Name = "User 3",
                            PasswordHash = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Surname = "Karkanitsa"
                        });
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleEntityUserEntity");
                });

            modelBuilder.Entity("AdditionalFacilityEntityBookingEntity", b =>
                {
                    b.HasOne("Data.Entities.AdditionalFacilityEntity", null)
                        .WithMany()
                        .HasForeignKey("AdditionalFacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.BookingEntity", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.BookingEntity", b =>
                {
                    b.HasOne("Data.Entities.CarEntity", "Car")
                        .WithMany("Bookings")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.RentalPointEntity", "RentalPoint")
                        .WithMany("Bookings")
                        .HasForeignKey("RentalPointId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Data.Entities.UserEntity", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("RentalPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.CarEntity", b =>
                {
                    b.HasOne("Data.Entities.RentalPointEntity", "RentalPoint")
                        .WithMany("Cars")
                        .HasForeignKey("RentalPointId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RentalPoint");
                });

            modelBuilder.Entity("Data.Entities.LocationEntity", b =>
                {
                    b.HasOne("Data.Entities.RentalPointEntity", "RentalPoint")
                        .WithOne("Location")
                        .HasForeignKey("Data.Entities.LocationEntity", "RentalPointId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RentalPoint");
                });

            modelBuilder.Entity("RoleEntityUserEntity", b =>
                {
                    b.HasOne("Data.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.CarEntity", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Data.Entities.RentalPointEntity", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Cars");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Data.Entities.UserEntity", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
